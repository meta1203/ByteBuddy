AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda function that writes JSON data to DynamoDB

Parameters:
  TableName:
    Type: String
    Default: ByteBuddy
    Description: ByteBuddy table name
  
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Deployment environment

Resources:
  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt DynamoDBTable.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sort
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sort
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: SortIndex
          KeySchema:
            - AttributeName: sort
              KeyType: HASH
            - AttributeName: id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Create Event Lambda Function
  CreateEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-create-event"
      CodeUri: ./
      Handler: create-event.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TableName
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /event
            Method: post
      Tags:
        Environment: !Ref Environment

  # Get Event Lambda Function
  ReadEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-get-event"
      CodeUri: ./
      Handler: get-event.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TableName
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /event/{id}
            Method: get
      Tags:
        Environment: !Ref Environment
        
  # Create Person Lambda Function
  CreatePersonFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-create-person"
      CodeUri: ./
      Handler: create-person.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TableName
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /event/{id}/person
            Method: post
      Tags:
        Environment: !Ref Environment

  # Get Person Lambda Function
  GetPersonFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-get-person"
      CodeUri: ./
      Handler: get-person.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TableName
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /event/{id}/person/{code}
            Method: get
      Tags:
        Environment: !Ref Environment
        
  # Delete Person Lambda Function
  DeletePersonFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-delete-person"
      CodeUri: ./
      Handler: delete-person.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TableName
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /event/{id}/person/{code}
            Method: delete
      Tags:
        Environment: !Ref Environment
        
  # Get People By Keyword Lambda Function
  GetPeopleByKeywordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-get-people-by-keyword"
      CodeUri: ./
      Handler: get-people-by-keyword.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TableName
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /event/{id}/person/keyword/{keyword}
            Method: get
      Tags:
        Environment: !Ref Environment

Outputs:
  CreateEventFunction:
    Description: "Create Event Lambda Function ARN"
    Value: !GetAtt CreateEventFunction.Arn

  ReadEventFunction:
    Description: "Get Event Lambda Function ARN"
    Value: !GetAtt ReadEventFunction.Arn

  CreatePersonFunction:
    Description: "Create Person Lambda Function ARN"
    Value: !GetAtt CreatePersonFunction.Arn

  GetPersonFunction:
    Description: "Get Person Lambda Function ARN"
    Value: !GetAtt GetPersonFunction.Arn

  DeletePersonFunction:
    Description: "Delete Person Lambda Function ARN"
    Value: !GetAtt DeletePersonFunction.Arn

  LambdaExecutionRole:
    Description: "IAM Role created for all Lambda functions"
    Value: !GetAtt LambdaExecutionRole.Arn

  CreateEventApiEndpoint:
    Description: "API Gateway endpoint URL for creating events"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/event"

  ReadEventApiEndpoint:
    Description: "API Gateway endpoint URL for getting events"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/event/{id}"

  CreatePersonApiEndpoint:
    Description: "API Gateway endpoint URL for creating persons"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/event/{id}/person"

  GetPersonApiEndpoint:
    Description: "API Gateway endpoint URL for getting persons"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/event/{id}/person/{code}"

  DeletePersonApiEndpoint:
    Description: "API Gateway endpoint URL for deleting persons"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/event/{id}/person/{code}"
    
  GetPeopleByKeywordFunction:
    Description: "Get People By Keyword Lambda Function ARN"
    Value: !GetAtt GetPeopleByKeywordFunction.Arn
    
  GetPeopleByKeywordApiEndpoint:
    Description: "API Gateway endpoint URL for getting people by keyword"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/event/{id}/person/keyword/{keyword}"

  DynamoDBTableName:
    Description: "DynamoDB table name"
    Value: !Ref DynamoDBTable
